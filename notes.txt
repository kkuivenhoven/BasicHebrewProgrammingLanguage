/** read here 2.5.1 https://www.gnu.org/software/bison/manual/bison.html#Mfcalc-Declarations */


וק                                        { cout << " 2. found a key" << endl; return STRING_TYPE; }
[קראטוןםפשדגכעיחלךףזסבהנמצתץ]+\s+וק                                        { cout << " 1. found a key" << endl; return STRING_TYPE; }

str:
	STRING_LITERAL { $$ = $1; }
	| str STRING_LITERAL { $$ = $1; }
	| STRING_LITERAL STRING_TYPE { $$ = $1; }
	| str ASSIGN STRING_LITERAL STRING_TYPE { $$ = $1; }
	| str ASSIGN STRING_LITERAL { $$ = $1; }
	;


[\u05E7\u05D5]       { yylval.stringVal = yytext; return STRING_DEC; }
[a-z\u05D0-\u05EA]

[קראטוןםפשדגכעיחלךףזסבהנמצתץ]+\s+(וק)       cout << " MATCHED: " << yytext << endl;
(וק)\s+[קראטוןםפשדגכעיחלךףזסבהנמצתץ]+       cout << " MATCHED: " << yytext << endl;

[קראטוןםפשדגכעיחלךףזסבהנמצתץ]+        { yylval.stringVal = yytext; return STRING_LITERAL; }

(\u05D5\u05E7)\s+[קראטוןםפשדגכעיחלךףזסבהנמצתץ]+       cout << " MATCHED: " << yytext << endl;

[^\b\u05D5][\u05E7\b]

[\u05D5]{1}[\u05E7]{1}       cout << " MATCHED: " << yytext << endl;

u05D0-u05EA

%token STRING_TYPE "וק"


%token STRING_DEC 
  | STRING_LITERAL ASSIGN STRING_LITERAL STRING_DEC { $$ = $3; }


	| STRING_LITERAL str { $$ = $1; }


	STRING_LITERAL { $$ = $1; }
	| str STRING_LITERAL { $$ = $1; }
	| STRING_LITERAL STRING_TYPE { $$ = $1; }
	| STRING_LITERAL ASSIGN str { $$ = $3; }




useful noteS: https://quickgrid.blogspot.com/2016/08/Creating-a-Simple-Compiler-Symbol-Table-using-Hashing-Cpp-and-Explanation.html

https://www.tutorialspoint.com/compiler_design/compiler_design_symbol_table.htm

https://www.cs.uky.edu/~kwjoiner/cs441/proj/proj1.1/proj1.1.pdf
